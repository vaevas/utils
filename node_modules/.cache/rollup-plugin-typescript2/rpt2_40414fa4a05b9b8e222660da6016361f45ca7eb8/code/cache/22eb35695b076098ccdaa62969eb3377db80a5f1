{"code":"// 校验函数\nimport { mobileCheck, idCardCheck, emailCheck, isAlpha, isAlphaSpace, isAlphanumeric, isAlphanumericSpace, isNumeric, isDecimal, isNegativeDecimal, isPositiveDecimal, isInteger, isPositiveInteger, isNegativeInteger, isNumericSpace, } from './validates/index';\n// 格式化函数\nimport { titleCase, camelCase, parseTime, uncapitalize, swapCase, } from './formats/index';\n// 工具函数\nimport { deepClone } from './tools/index';\nexport default {\n    mobileCheck,\n    idCardCheck,\n    emailCheck,\n    isAlpha,\n    isAlphaSpace,\n    isAlphanumeric,\n    isAlphanumericSpace,\n    isNumeric,\n    isDecimal,\n    isNegativeDecimal,\n    isPositiveDecimal,\n    isInteger,\n    isPositiveInteger,\n    isNegativeInteger,\n    isNumericSpace,\n    titleCase,\n    camelCase,\n    parseTime,\n    uncapitalize,\n    swapCase,\n    deepClone,\n};\n","references":["/Users/taiyi/person/vaevas-utils/src/validates/index.ts","/Users/taiyi/person/vaevas-utils/src/formats/index.ts","/Users/taiyi/person/vaevas-utils/src/tools/index.ts"],"dts":{"name":"/Users/taiyi/person/vaevas-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"declare const _default: {\n    mobileCheck: (value: string) => boolean;\n    idCardCheck: (value: string) => boolean;\n    emailCheck: (value: string) => boolean;\n    isAlpha: (input: string) => boolean;\n    isAlphaSpace: (input: string) => boolean;\n    isAlphanumeric: (input: string) => boolean;\n    isAlphanumericSpace: (input: string) => boolean;\n    isNumeric: (input: string) => boolean;\n    isDecimal: (input: string) => boolean;\n    isNegativeDecimal: (input: string) => boolean;\n    isPositiveDecimal: (input: string) => boolean;\n    isInteger: (input: string) => boolean;\n    isPositiveInteger: (input: string) => boolean;\n    isNegativeInteger: (input: string) => boolean;\n    isNumericSpace: (input: string) => boolean;\n    titleCase: (str: string) => string;\n    camelCase: (str: string) => string;\n    parseTime: (time?: string | number | Date | undefined, pattern?: string | undefined) => string | null;\n    uncapitalize: (str: string) => string;\n    swapCase: (str: string) => string;\n    deepClone: (obj: any) => any;\n};\nexport default _default;\n"}}
